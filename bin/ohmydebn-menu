#!/bin/bash

export PATH="$HOME/.local/share/ohmydebn/bin:$PATH"

# Set to true when going directly to a submenu, so we can exit directly
BACK_TO_EXIT=false

back_to() {
  local parent_menu="$1"

  if [[ "$DIRECT_ACCESS" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | /usr/bin/rofi -dpi 1 -dmenu -p "$prompt…" "${args[@]}"
}

terminal() {
  alacritty --class OhMyDebn -e "$@"
}

present_terminal() {
  ohmydebn-launch-floating-terminal-with-presentation $1
}

install() {
  present_terminal "echo 'Installing $1...'; sudo apt -y install $2"
}

install_and_launch() {
  present_terminal "echo 'Installing $1...'; sudo apt -y install $2 && setsid gtk-launch $3"
}

show_learn_menu() {
  case $(menu "Learn" "  Keybindings\n  OhMyDebn\n  Cinnamon\n  Debian\n  Neovim\n󱆃  Bash") in
  *Keybindings*) ohmydebn-launch-webapp "https://github.com/dougburks/ohmydebn?tab=readme-ov-file#hotkeys" ;;
  *OhMyDebn*) ohmydebn-launch-webapp "https://ohmydebn.org" ;;
  *Cinnamon*) ohmydebn-launch-webapp "https://github.com/linuxmint/cinnamon" ;;
  *Debian*) ohmydebn-launch-webapp "https://wiki.debian.org/" ;;
  *Bash*) ohmydebn-launch-webapp "https://devhints.io/bash" ;;
  *Neovim*) ohmydebn-launch-webapp "https://www.lazyvim.org/keymaps" ;;
  *) show_main_menu ;;
  esac
}

show_style_menu() {
  case $(menu "Style" "󰸌  Theme\n  Background") in
  *Theme*) ohmydebn-theme-set-gui ;;
  *Background*) ohmydebn-theme-bg-next ;;
  *) show_main_menu ;;
  esac
}

show_capture_menu() {
  case $(menu "Capture" "  Screenshot\n  Screenrecord\n󰃉  Color") in
  *Screenshot*) show_screenshot_menu ;;
  *Screenrecord*) show_screenrecord_menu ;;
  *Color*) /usr/bin/gcolor3 ;;
  *) show_main_menu ;;
  esac
}

show_screenshot_menu() {
  case $(menu "Screenshot" "  Region\n  Window\n  Display") in
  *Region*) /usr/bin/xdotool key Shift+Print ;;
  *Window*) /usr/bin/xdotool key Alt+Print ;;
  *Display*) /usr/bin/xdotool key Print ;;
  *) show_capture_menu ;;
  esac
}

show_screenrecord_menu() {
  case $(menu "Screenrecord" "  Start/Stop") in
  *Start*) /usr/bin/xdotool key Shift+Ctrl+Alt+R ;;
  *) show_capture_menu ;;
  esac
}

show_install_menu() {
  #case $(menu "Install" "  Package\n  Web App\n  TUI\n  Service\n  Style") in
  case $(menu "Install" "  Package\n  Web App\n  TUI\n  Style") in
  *Package*) terminal ohmydebn-pkg-install ;;
  *Web*) present_terminal ohmydebn-webapp-install ;;
  *TUI*) present_terminal ohmydebn-tui-install ;;
  *Style*) show_install_style_menu ;;
  *Development*) show_install_development_menu ;;
  *) show_main_menu ;;
  esac
}

show_install_style_menu() {
  case $(menu "Install" "󰸌  Theme\n  Background") in
  *Theme*) present_terminal ohmydebn-theme-install ;;
  *Background*) nemo ~/.config/ohmydebn/current/theme/backgrounds ;;
  *) show_install_menu ;;
  esac
}

show_install_development_menu() {
  case $(menu "Install" "󰫏  Ruby on Rails\n  Docker DB\n  JavaScript\n  Go\n  PHP\n  Python\n  Elixir\n  Zig\n  Rust\n  Java\n  .NET\n  OCaml\n  Clojure") in
  *Rails*) present_terminal "ohmydebn-install-dev-env ruby" ;;
  *Docker*) present_terminal ohmydebn-install-docker-dbs ;;
  *JavaScript*) show_install_javascript_menu ;;
  *Go*) present_terminal "ohmydebn-install-dev-env go" ;;
  *PHP*) show_install_php_menu ;;
  *Python*) present_terminal "ohmydebn-install-dev-env python" ;;
  *Elixir*) show_install_elixir_menu ;;
  *Zig*) present_terminal "ohmydebn-install-dev-env zig" ;;
  *Rust*) present_terminal "ohmydebn-install-dev-env rust" ;;
  *Java*) present_terminal "ohmydebn-install-dev-env java" ;;
  *NET*) present_terminal "ohmydebn-install-dev-env dotnet" ;;
  *OCaml*) present_terminal "ohmydebn-install-dev-env ocaml" ;;
  *Clojure*) present_terminal "ohmydebn-install-dev-env clojure" ;;
  *) show_install_menu ;;
  esac
}

show_install_javascript_menu() {
  case $(menu "Install" "  Node.js\n  Bun\n  Deno") in
  *Node*) present_terminal "ohmydebn-install-dev-env node" ;;
  *Bun*) present_terminal "ohmydebn-install-dev-env bun" ;;
  *Deno*) present_terminal "ohmydebn-install-dev-env deno" ;;
  *) show_install_development_menu ;;
  esac
}

show_install_php_menu() {
  case $(menu "Install" "  PHP\n  Laravel\n  Symfony") in
  *PHP*) present_terminal "ohmydebn-install-dev-env php" ;;
  *Laravel*) present_terminal "ohmydebn-install-dev-env laravel" ;;
  *Symfony*) present_terminal "ohmydebn-install-dev-env symfony" ;;
  *) show_install_development_menu ;;
  esac
}

show_install_elixir_menu() {
  case $(menu "Install" "  Elixir\n  Phoenix") in
  *Elixir*) present_terminal "ohmydebn-install-dev-env elixir" ;;
  *Phoenix*) present_terminal "ohmydebn-install-dev-env phoenix" ;;
  *) show_install_development_menu ;;
  esac
}

show_remove_menu() {
  case $(menu "Remove" "  Package\n  Web App\n  TUI\n󰸌  Theme") in
  *Package*) terminal ohmydebn-pkg-remove ;;
  *Web*) present_terminal ohmydebn-webapp-remove ;;
  *TUI*) present_terminal ohmydebn-tui-remove ;;
  *Theme*) present_terminal ohmydebn-theme-remove ;;
  *) show_main_menu ;;
  esac
}

show_update_menu() {
  case $(menu "Update" "  OhMyDebn\n  Password\n  Timezone") in
  *OhMyDebn*) present_terminal ohmydebn-update ;;
  *Password*) show_update_password_menu ;;
  *Timezone*) cinnamon-settings calendar ;;
  *) show_main_menu ;;
  esac
}

show_update_password_menu() {
  case $(menu "Update Password" "  User") in
  *User*) present_terminal passwd ;;
  *) show_update_menu ;;
  esac
}

show_system_menu() {
  case $(menu "System" "  Lock\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown") in
  *Lock*) cinnamon-screensaver-command -l ;;
  *Suspend*) systemctl suspend ;;
  *Relaunch*) cinnamon --replace & ;;
  *Restart*) systemctl reboot ;;
  *Shutdown*) systemctl poweroff ;;
  *) back_to show_main_menu ;;
  esac
}

show_main_menu() {
  go_to_menu "$(menu "Go" "󰀻  Apps\n󰧑  Learn\n  Capture\n  Style\n󰉉  Install\n󰭌   Remove\n  Update\n  About\n  Demo\n  System")"
}

go_to_menu() {
  case "${1,,}" in
  *apps*) /usr/bin/rofi -dpi 1 -show drun -show-icons -p "Launch…" ;;
  *learn*) show_learn_menu ;;
  *style*) show_style_menu ;;
  *theme*) ohmydebn-theme-set-gui ;;
  *capture*) show_capture_menu ;;
  *screenshot*) show_screenshot_menu ;;
  *screenrecord*) show_screenrecord_menu ;;
  *install*) show_install_menu ;;
  *remove*) show_remove_menu ;;
  *update*) show_update_menu ;;
  *about*) ohmydebn-screenfetch-gui ;;
  *demo*) ohmydebn-demo-gui ;;
  *system*) show_system_menu ;;
  esac
}

if [[ -n "$1" ]]; then
  BACK_TO_EXIT=true
  go_to_menu "$1"
else
  show_main_menu
fi
